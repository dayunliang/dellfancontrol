#!/bin/python
# -*- coding: utf-8 -*-

import sys
import re
import os
import time
import subprocess
import syslog
import signal
import logging
from logging.handlers import RotatingFileHandler

# 脚本参数和路径设置
pausetime = 10  # 循环暂停时间（秒）
ipmiexe = "/vmfs/volumes/datastore3/opt/ipmitool/ipmitool"  # IPMI工具路径
temp1 = 0.0  # CPU1温度
temp2 = 0.0  # CPU2温度
prevtemp1 = 0.0  # 上一次记录的CPU1温度
prevtemp2 = 0.0  # 上一次记录的CPU2温度
fanmode = "static"  # 风扇模式，默认静态模式

log_file = "/var/log/fanctl.log"  # 主日志文件路径
mode_change_log_file = "/var/log/fanctl_mode_change.log"  # 风扇模式改变日志文件路径
log_max_bytes = 5 * 1024 * 1024  # 日志文件大小（5 MB）
log_backup_count = 3  # 保留的备份日志文件数量
PIDFILE = "/var/run/fanctl.pid"  # PID文件路径

# IPMI命令
fanauto = ["raw", "0x30", "0x30", "0x01", "0x01"]  # 切换至自动风扇模式的IPMI命令
fanmanual = ["raw", "0x30", "0x30", "0x01", "0x00"]  # 切换至手动/静态风扇模式的IPMI命令
returntoauto = 65.0  # 当CPU温度高于等于此值时，切换回自动风扇模式
manual_threshold = 60.0  # 当所有CPU温度低于此值时，切换为手动风扇模式
temp_thresholds = [45.0, 50.0, 55.0, 60.0, 65.0]  # CPU温度阈值，对应不同风扇速度设定点

# 风扇速度设置表，根据不同温度设定不同风扇速度
fanspeeds = {
    "FAN2": [
        ["raw", "0x30", "0x30", "0x02", "0x02", "0x0a"],   # 默认速度 10%
        ["raw", "0x30", "0x30", "0x02", "0x02", "0x0f"],   # 大于等于temp1时 15%
        ["raw", "0x30", "0x30", "0x02", "0x02", "0x14"],   # 大于等于temp2时 20%
        ["raw", "0x30", "0x30", "0x02", "0x02", "0x19"],   # 大于等于temp3时 25%
        ["raw", "0x30", "0x30", "0x02", "0x02", "0x1e"]    # 大于等于temp4时 30%
    ],
    "FAN3": [
        ["raw", "0x30", "0x30", "0x02", "0x03", "0x0a"],   # 默认速度 10%
        ["raw", "0x30", "0x30", "0x02", "0x03", "0x0f"],   # 大于等于temp1时 15%
        ["raw", "0x30", "0x30", "0x02", "0x03", "0x14"],   # 大于等于temp2时 20%
        ["raw", "0x30", "0x30", "0x02", "0x03", "0x19"],   # 大于等于temp3时 25%
        ["raw", "0x30", "0x30", "0x02", "0x03", "0x1e"]    # 大于等于temp4时 30%
    ],
    "FAN0": [["raw", "0x30", "0x30", "0x02", "0x00", "0x0a"]],   # 默认速度 10%
    "FAN1": [["raw", "0x30", "0x30", "0x02", "0x01", "0x0a"]],
    "FAN4": [["raw", "0x30", "0x30", "0x02", "0x04", "0x0a"]],
    "FAN5": [["raw", "0x30", "0x30", "0x02", "0x05", "0x0a"]]
}

# 设置主日志记录
logger = logging.getLogger("fanctl")
logger.setLevel(logging.DEBUG)  # 设置日志级别为DEBUG
handler = RotatingFileHandler(log_file, maxBytes=log_max_bytes, backupCount=log_backup_count)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# 设置风扇模式改变日志记录
mode_change_logger = logging.getLogger("fanctl_mode_change")
mode_change_logger.setLevel(logging.DEBUG)  # 设置日志级别为DEBUG

# 在脚本启动时清空风扇模式改变日志文件内容
with open(mode_change_log_file, 'w'):
    pass

mode_change_handler = RotatingFileHandler(mode_change_log_file, maxBytes=log_max_bytes, backupCount=log_backup_count)
mode_change_handler.setFormatter(formatter)
mode_change_logger.addHandler(mode_change_handler)

last_logged_time = None

# 记录消息到主日志文件和syslog
def log_message(message):
    logger.debug(message)  # 记录DEBUG级别的日志
    syslog.syslog(syslog.LOG_DEBUG, message)  # 记录到syslog中

# 记录风扇模式改变信息到单独的日志文件
def log_mode_change_message(message, add_separator=True):
    global last_logged_time
    current_time = time.strftime('%Y-%m-%d %H:%M:%S')

    if add_separator and (last_logged_time is None or last_logged_time != current_time):
        mode_change_logger.debug("="*80)  # 添加分隔符

    mode_change_logger.debug(f"{current_time} - {message}")  # 记录风扇模式改变信息到单独的日志文件
    last_logged_time = current_time

# 切换风扇至自动模式
def autofan():
    subprocess.run([ipmiexe] + fanauto, capture_output=True)
    log_message("Set fans to auto mode")
    log_mode_change_message("Set fans to auto mode")
    return

# 设置指定风扇的速度
def setfanspeed(fan, setspeed):
    subprocess.run([ipmiexe] + setspeed, capture_output=True)
    log_message(f"Set {fan} speed to {int(setspeed[-1], 16)}%")
    return

# 获取CPU温度
def getcputemps():
    temps = [0.0, 0.0]
    try:
        # 使用IPMI工具获取CPU温度
        ipmiproc = [ipmiexe, "sensor", "list"]
        result = subprocess.run(ipmiproc, capture_output=True)
        output = result.stdout.decode()

        # 解析IPMI输出以获取温度信息
        lines = output.splitlines()
        if len(lines) > 16:
            temp1_line = lines[14]
            temp2_line = lines[15]

            match_temp1 = re.search(r'(\d+\.\d+)', temp1_line)
            match_temp2 = re.search(r'(\d+\.\d+)', temp2_line)

            if match_temp1:
                temps[0] = float(match_temp1.group(1))
            if match_temp2:
                temps[1] = float(match_temp2.group(1))

        log_message(f"CPU1 Temp: {temps[0]}C, CPU2 Temp: {temps[1]}C")
    except Exception as ipmierror:
        # 发生异常时，切换风扇至自动模式并记录错误日志
        autofan()
        log_message(f"Cannot get IPMI temps: {ipmierror}")
        syslog.syslog(syslog.LOG_ERR, str(ipmierror))
    return temps

# 设置所有风扇的默认速度
def set_default_fan_speeds():
    for fan in ["FAN0", "FAN1", "FAN4", "FAN5", "FAN2", "FAN3"]:
        try:
            setfanspeed(fan, fanspeeds[fan][0])
        except Exception as ipmierror:
            log_message(f"Setting {fan} speed failed: {ipmierror}")
            syslog.syslog(syslog.LOG_ERR, str(ipmierror))

# 信号处理函数
def signal_handler(signal_id, frame):
    log_message(f"Signal {signal.Signals(signal_id).name} received")
    if signal_id == signal.SIGUSR1:
        os.remove(PIDFILE)  # 删除PID文件
        sys.exit(0)

# 注册信号处理函数
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGABRT, signal_handler)
signal.signal(signal.SIGHUP, signal_handler)
signal.signal(signal.SIGQUIT, signal_handler)
signal.signal(signal.SIGUSR1, signal_handler)

# 主程序入口
if __name__ == '__main__':
    log_message(f"Starting fan control script - Interval: {pausetime} seconds")
    set_default_fan_speeds()  # 设置所有风扇的默认速度
    log_mode_change_message("Script started, initializing all fan speeds to default values")

    while True:
        # 在每次循环的开始添加分隔符
        log_message("="*80)
        try:
            temp1, temp2 = getcputemps()  # 获取CPU温度
        except Exception as ipmierror:
            autofan()  # 获取温度异常时切换风扇至自动模式
            log_message("Error getting IPMI temps, switching fans to auto mode")
            temp1 = prevtemp1
            temp2 = prevtemp2

        # 检查是否需要将风扇模式切换回手动模式
        if temp1 < manual_threshold and temp2 < manual_threshold and fanmode == "auto":
            subprocess.run([ipmiexe] + fanmanual, capture_output=True)
            fanmode = "static"
            log_mode_change_message(f"Switching to manual mode, CPU1 Temp: {temp1}C, CPU2 Temp: {temp2}C")

            # 设置所有风扇的速度为默认速度
            set_default_fan_speeds()

        # 处理每个风扇的温度和速度设定逻辑
        for i, (temp, prevtemp, fan) in enumerate(zip([temp1, temp2], [prevtemp1, prevtemp2], ["FAN2", "FAN3"])):
            log_message(f"Processing {fan} with current temp: {temp}C, previous temp: {prevtemp}C")
            log_message(f"Current fan mode: {fanmode}, Temperature thresholds: {temp_thresholds}")
            if temp != prevtemp:
                try:
                    if temp >= returntoauto and fanmode == "static":
                        autofan()
                        fanmode = "auto"
                        log_mode_change_message(f"Switching to auto mode, CPU Temp: {temp}C")
                    else:
                        # 根据温度阈值设置风扇速度
                        if temp < temp_thresholds[0]:
                            setspeed = fanspeeds[fan][0]
                        elif temp >= temp_thresholds[0] and temp < temp_thresholds[1]:
                            setspeed = fanspeeds[fan][1]
                        elif temp >= temp_thresholds[1] and temp < temp_thresholds[2]:
                            setspeed = fanspeeds[fan][2]
                        elif temp >= temp_thresholds[2] and temp < temp_thresholds[3]:
                            setspeed = fanspeeds[fan][3]
                        elif temp >= temp_thresholds[3] and temp < temp_thresholds[4]:
                            setspeed = fanspeeds[fan][4]
                        elif temp >= temp_thresholds[4]:
                            autofan()
                            fanmode = "auto"
                            log_mode_change_message(f"Switching to auto mode, CPU Temp: {temp}C")
                            setspeed = fanspeeds[fan][0]  # 设置默认速度，当温度 >= 65°C时

                        setfanspeed(fan, setspeed)  # 设置风扇速度
                        log_message(f"Setting {fan} speed to {int(setspeed[-1], 16)}%")
                except Exception as ipmierror:
                    autofan()  # 设定风扇速度失败时切换风扇至自动模式
                    log_message(f"Setting {fan} speed failed: {ipmierror}")
                    syslog.syslog(syslog.LOG_ERR, str(ipmierror))
            if i == 0:
                prevtemp1 = temp  # 更新CPU1上次温度
            else:
                prevtemp2 = temp  # 更新CPU2上次温度
        
        # 记录CPU温度和风扇设定速度的对应关系
        fan_speed_info = (
            f"CPU1 Temp: {temp1}C, FAN2 Speed: {int(fanspeeds['FAN2'][min(4, sum(temp1 >= t for t in temp_thresholds))][-1], 16)}%\n"
            f"CPU2 Temp: {temp2}C, FAN3 Speed: {int(fanspeeds['FAN3'][min(4, sum(temp2 >= t for t in temp_thresholds))][-1], 16)}%"
        )
        log_message(f"CPU and Fan Speed Correspondence:\n{fan_speed_info}")

        time.sleep(pausetime)  # 暂停一段时间后继续执行

    sys.exit()  # 退出程序
